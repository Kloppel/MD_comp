# This script was generated by OpenMM-Setup on 2024-06-14.

from openmm import *
from openmm.app import *
from openmm.unit import *
from simtk.unit import *
from sys import stdout, exit, stderr
import psutil
import time

import os
print(os.getcwd())

# Input Files
psf = CharmmPsfFile('../struct/1eru.psf')
pdb = PDBFile('../struct/1eru.pdb')
print("This are the pdbreader files")
param_list=['toppar_water_ions.str', 'toppar_ions_won.str', 'toppar_dum_noble_gases.str', 'toppar_all36_synthetic_polymer_patch.str', 'toppar_all36_synthetic_polymer.str', 'toppar_all36_prot_retinol.str', 'toppar_all36_prot_na_combined.str', 'toppar_all36_prot_modify_res.str', 'toppar_all36_prot_model.str', 'toppar_all36_prot_heme.str', 'toppar_all36_prot_fluoro_alkanes.str', 'toppar_all36_prot_c36m_d_aminoacids.str', 'toppar_all36_prot_arg0.str', 'toppar_all36_polymer_solvent.str', 'toppar_all36_na_rna_modified.str', 'toppar_all36_nano_lig_patch.str', 'toppar_all36_nano_lig.str', 'toppar_all36_na_nad_ppi.str', 'toppar_all36_moreions.str', 'toppar_all36_lipid_yeast.str', 'toppar_all36_lipid_tag.str', 'toppar_all36_lipid_sphingo.str', 'toppar_all36_lipid_prot.str', 'toppar_all36_lipid_oxidized.str', 'toppar_all36_lipid_mycobacterial.str', 'toppar_all36_lipid_model.str', 'toppar_all36_lipid_miscellaneous.str', 'toppar_all36_lipid_lps.str', 'toppar_all36_lipid_lnp.str', 'toppar_all36_lipid_inositol.str', 'toppar_all36_lipid_hmmm.str', 'toppar_all36_lipid_ether.str', 'toppar_all36_lipid_detergent.str', 'toppar_all36_lipid_dag.str', 'toppar_all36_lipid_cholesterol.str', 'toppar_all36_lipid_cardiolipin.str', 'toppar_all36_lipid_bacterial.str', 'toppar_all36_lipid_archaeal.str', 'toppar_all36_label_spin.str', 'toppar_all36_label_fluorophore.str', 'toppar_all36_carb_imlab.str', 'toppar_all36_carb_glycopeptide.str', 'toppar_all36_carb_glycolipid.str', 'top_interface.rtf', 'top_all36_prot.rtf', 'top_all36_na.rtf', 'top_all36_lipid.rtf', 'top_all36_cgenff.rtf', 'top_all36_carb.rtf', 'par_interface.prm', 'par_all36_na.prm', 'par_all36m_prot.prm', 'par_all36_lipid.prm', 'par_all36_cgenff.prm', 'par_all36_carb.prm', 'cam.str']
param_files= ["../params/"+ filename for filename in param_list]
params = CharmmParameterSet(*param_files)
#Integrators
dt = 0.002*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond

# System Configuration
nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 0.0005
constraints = HBonds
rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 1.5*amu

is_periodic = psf.box_vectors is not None

#Periodic Box Vectors
if not is_periodic:
    sizebox=6.3
    # Example values for box lengths (in nanometers)
    a_length = sizebox * nanometer
    b_length = sizebox * nanometer
    c_length = sizebox * nanometer
    print("Setting periodic box vectors to")

    # Set periodic box vectors
    psf.setBox(a_length, b_length, c_length)

# Prepare the Simulation
def print_memory_usage():
    process = psutil.Process(os.getpid())
    print('Memory usage:', process.memory_info().rss / (1024 * 1024), 'MB')  # in MB

start1 = time.time()
print('Building system...')
topology = psf.topology
system = psf.createSystem(params, nonbondedCutoff=nonbondedCutoff,nonbondedMethod=nonbondedMethod,
                          constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance, hydrogenMass=hydrogenMass)

# Integrators
integrator = LangevinMiddleIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(psf.topology, system, integrator)
simulation.context.setPositions(pdb.positions)

# Perform minimization before heating
print("minimizing system...")
with open('velocities_min.txt', 'w') as velocity_file:
    simulation.minimizeEnergy()
    simulation.reporters.append(PDBReporter('output.pdb', 5000))
    simulation.reporters.append(StateDataReporter(stdout, 5000, step=True, potentialEnergy=True, temperature=True))
    state = simulation.context.getState(getVelocities=True)
    velocities = state.getVelocities(asNumpy=False)

    velocity_file.write(f"Velocities at {temperature}:\n")
    for velocity in velocities:
        velocity_file.write(f"{velocity}\n")
    
    simulation.step(100000)

print("end of minimization")
state = simulation.context.getState(getPositions=True)
with open('../struct/minimized_1eru.pdb', 'w') as output:
    PDBFile.writeFile(simulation.topology, state.getPositions(), output)

