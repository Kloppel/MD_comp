# This script was generated by OpenMM-Setup on 2024-06-14.

from openmm import LangevinMiddleIntegrator, State, MonteCarloBarostat
import openmm.app as app

from openmm.unit import *
from simtk.unit import *

from sys import stdout, exit, stderr
import psutil
import time

from utils_local import loading_bar, seconds_to_timestring, get_keyString

import os

print(os.getcwd())


heating_steps = 2500
struct_name = '1eru'
run_name=f"hs{heating_steps}_NPT"

# Input Files
print("\n\nThe structured being modelled is: ", struct_name)
if run_name:
    print("The run name is: ", run_name)
    run_name = f"_{run_name}"
else:
    print("No run name was provided, saving as default structure.")

#

psf = app.CharmmPsfFile(f'../struct/{struct_name}.psf')
pdb = app.PDBFile(f'../struct/{struct_name}.pdb')
print("This are the pdbreader files")
forceField = app.ForceField('../charmm36/charmm36.xml', '../charmm36/water.xml')
param_list=['toppar_water_ions.str', 'toppar_ions_won.str', 'toppar_dum_noble_gases.str', 'toppar_all36_synthetic_polymer_patch.str', 'toppar_all36_synthetic_polymer.str', 'toppar_all36_prot_retinol.str', 'toppar_all36_prot_na_combined.str', 'toppar_all36_prot_modify_res.str', 'toppar_all36_prot_model.str', 'toppar_all36_prot_heme.str', 'toppar_all36_prot_fluoro_alkanes.str', 'toppar_all36_prot_c36m_d_aminoacids.str', 'toppar_all36_prot_arg0.str', 'toppar_all36_polymer_solvent.str', 'toppar_all36_na_rna_modified.str', 'toppar_all36_nano_lig_patch.str', 'toppar_all36_nano_lig.str', 'toppar_all36_na_nad_ppi.str', 'toppar_all36_moreions.str', 'toppar_all36_lipid_yeast.str', 'toppar_all36_lipid_tag.str', 'toppar_all36_lipid_sphingo.str', 'toppar_all36_lipid_prot.str', 'toppar_all36_lipid_oxidized.str', 'toppar_all36_lipid_mycobacterial.str', 'toppar_all36_lipid_model.str', 'toppar_all36_lipid_miscellaneous.str', 'toppar_all36_lipid_lps.str', 'toppar_all36_lipid_lnp.str', 'toppar_all36_lipid_inositol.str', 'toppar_all36_lipid_hmmm.str', 'toppar_all36_lipid_ether.str', 'toppar_all36_lipid_detergent.str', 'toppar_all36_lipid_dag.str', 'toppar_all36_lipid_cholesterol.str', 'toppar_all36_lipid_cardiolipin.str', 'toppar_all36_lipid_bacterial.str', 'toppar_all36_lipid_archaeal.str', 'toppar_all36_label_spin.str', 'toppar_all36_label_fluorophore.str', 'toppar_all36_carb_imlab.str', 'toppar_all36_carb_glycopeptide.str', 'toppar_all36_carb_glycolipid.str', 'top_interface.rtf', 'top_all36_prot.rtf', 'top_all36_na.rtf', 'top_all36_lipid.rtf', 'top_all36_cgenff.rtf', 'top_all36_carb.rtf', 'par_interface.prm', 'par_all36_na.prm', 'par_all36m_prot.prm', 'par_all36_lipid.prm', 'par_all36_cgenff.prm', 'par_all36_carb.prm', 'cam.str']
param_files= ["../params/"+ filename for filename in param_list]
params = app.CharmmParameterSet(*param_files)

# System Configuration

nonbondedMethod = app.PME
nonbondedCutoff = 1.0*nanometer
ewaldErrorTolerance = 0.0005
constraints = app.HBonds
rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 1.5*amu

is_periodic = psf.box_vectors is not None

#Periodic Box Vectors
if not is_periodic:
    sizebox=6.3
    # Example values for box lengths (in nanometers)
    a_length = sizebox * nanometer
    b_length = sizebox * nanometer
    c_length = sizebox * nanometer
    print(f"\n\nSetting periodic box vectors to ({a_length}, {b_length}, {c_length})")

    # Set periodic box vectors
    psf.setBox(a_length, b_length, c_length)

#Integrators

dt = 0.002*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
barostatInterval = 25

# Heating parameters
initial_temperature = 0 * kelvin
target_temperature = 300 * kelvin
temperature_increment = 6 * kelvin # Increasing temperature by 6 K
heating_steps = heating_steps  # Number of steps per temperature increment


# Prepare the Simulation
def print_memory_usage():
    process = psutil.Process(os.getpid())
    print('Memory usage:', process.memory_info().rss / (1024 * 1024), 'MB')  # in MB

#reporter for a avarage velocity and temperature



start1 = time.time()

art="""
  T                                    \`.    T
  |    T     .--------------.___________) \   |    T     ==================
  !    |     |//////////////|___________[ ]   !  T |     Bulding the System 
       !     `--------------'           ) (      | !     ==================
                                    mn  '-'      !
"""
print(art)

topology = psf.topology
positions = pdb.positions
system = psf.createSystem(params, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
                          constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance, hydrogenMass=hydrogenMass)

integrator = LangevinMiddleIntegrator(initial_temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)

values2report = {"step": True, "kineticEnergy": True, "temperature": True, "speed": True, "volume": True}
outfile=f"../results/{struct_name}_heating{run_name}.csv"
reporter = app.StateDataReporter(outfile, heating_steps/10, 
                                  separator=';', **values2report)
print(f"\n\nResults for {get_keyString(values2report)} will be saved in {outfile}")

outfile=f"../results/{struct_name}_heating{run_name}.dcd"
dcd_reporter = app.DCDReporter(f'outfile', int(heating_steps/10))
print(f"Trajectory will be saved in {outfile}")

system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
print(f"MonteCarloBarostat added to the system at {pressure} and {initial_temperature}")



simulation = app.Simulation(topology, system, integrator)
simulation.context.setPositions(positions)
simulation.reporters.append(reporter)

# Minimization

simulation.minimizeEnergy(maxIterations=0)

# Heating Process
art="""
\n
              (
              )\\
              {_}
             .-;-.                                                .-~~~-.
            |'-=-'|                                       .- ~ ~-(       )_ _
            |     |     =======================          /                     ~ -.
            |     |     Heating process started         |          1 atm           \\
            |     |     =======================          \                         .'
            |     |                                        ~- . _____________ . -~
            '.___.'
 """
print(art)
initial_time = time.time()
current_temperature = initial_temperature
simulation.context.setVelocitiesToTemperature(current_temperature)  

while current_temperature < target_temperature:
    integrator.setTemperature(current_temperature)
    simulation.context.setParameter(MonteCarloBarostat.Temperature(), current_temperature)

    lb=loading_bar(current_temperature, target_temperature,
                msg=f"Heating to {target_temperature} current T={current_temperature}")
    print(lb, end='\r')
    # Run the simulation for the heating steps at this temperature
    simulation.step(heating_steps)
    
    # Increase the temperature
    current_temperature += temperature_increment
    lb=loading_bar(current_temperature, target_temperature,
                msg=f"Heating to {target_temperature} current T={current_temperature}")
    print(lb, end='\r')

# Set the final target temperature for equilibration
integrator.setTemperature(target_temperature)
simulation.context.setParameter(MonteCarloBarostat.Temperature(), target_temperature)
simulation.step(heating_steps*20)
print("Heating process completed.")

final_time = time.time()
print(f"The process took {seconds_to_timestring(final_time-initial_time)}.")

# Retrieve the current state of the simulation
state: State = simulation.context.getState(getPositions=True)
box_vectors = state.getPeriodicBoxVectors()
simulation.topology.setPeriodicBoxVectors(box_vectors)

# Save PDB-File
with open(f'../struct/heated_{struct_name}{run_name}.pdb', 'w') as output:
    app.PDBFile.writeFile(simulation.topology, state.getPositions(), output)
    print(f"Final structure saved as heated_{struct_name}{run_name}.pdb")